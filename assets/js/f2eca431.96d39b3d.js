"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[624],{5268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>a});var i=n(3274),s=n(7023);const d={sidebar_custom_props:{description:"Mounts/dismounts an entity to/from a model."}},r="megmount",o={id:"command/megmount",title:"megmount",description:"Mounts the given entity on the given modeled entity, either as a passenger or the driver.",source:"@site/docs/command/megmount.mdx",sourceDirName:"command",slug:"/command/megmount",permalink:"/megizen-docs/command/megmount",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_custom_props:{description:"Mounts/dismounts an entity to/from a model."}},sidebar:"tutorialSidebar",previous:{title:"megmodel",permalink:"/megizen-docs/command/megmodel"},next:{title:"megstate",permalink:"/megizen-docs/command/megstate"}},l={},a=[{value:"Arguments",id:"arguments",level:2},{value:"Examples",id:"examples",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"megmount",children:(0,i.jsx)(t.code,{children:"megmount"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"megmount [entity:<entity>] [model:<active_model>] [bone:<bone>] (driver) (passenger) (dismount) (interactable) (damageable)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Mounts the given entity on the given modeled entity, either as a passenger or the driver."}),"\n",(0,i.jsxs)(t.p,{children:['The "bone_name" argument is required if the entity is being mounted as a passenger. It specifies which bone the entity will be mounted on.\nYou can find out mountable bone names by opening the model in Blockbench. More info on this can be found here: ',(0,i.jsx)(t.a,{href:"https://git.lumine.io/mythiccraft/model-engine-4/-/wikis/Modeling/Bone-Behaviors#mount",children:"https://git.lumine.io/mythiccraft/model-engine-4/-/wikis/Modeling/Bone-Behaviors#mount"})]}),"\n",(0,i.jsx)(t.p,{children:'The "dismount" argument is optional, but will dismount the entity if specified.\nThe "interactable" and "damageable" arguments are optional, but make the mount interactable and damageable, respectively.'}),"\n",(0,i.jsx)(t.h2,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Argument"}),(0,i.jsx)(t.th,{children:"Input"}),(0,i.jsx)(t.th,{children:"Required"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"entity"}),(0,i.jsx)(t.td,{children:"EntityTag"}),(0,i.jsx)(t.td,{children:"yes"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"The entity that will be mounted on the model."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"model"}),(0,i.jsx)(t.td,{children:"MegActiveModelTag"}),(0,i.jsx)(t.td,{children:"yes"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"The model to mount the entity to."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"bone"}),(0,i.jsx)(t.td,{children:"ElementTag"}),(0,i.jsx)(t.td,{children:"yes if entity is not a driver"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Specifies which bone the entity will be mounted on. Required only if the entity is being mounted as a passenger."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"driver"}),(0,i.jsx)(t.td,{children:"N/A"}),(0,i.jsx)(t.td,{children:"yes if entity is not a passenger"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Whether to mount this entity as a driver. Required only if the entity being mounted is not a passenger."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"passenger"}),(0,i.jsx)(t.td,{children:"N/A"}),(0,i.jsx)(t.td,{children:"yes if entity is not a driver"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Whether to mount this entity as a passenger. Required only if the entity being mounted is not a passenger."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"dismount"}),(0,i.jsx)(t.td,{children:"N/A"}),(0,i.jsx)(t.td,{children:"no"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Whether to dismount the current mounted entity. This is an optional argument."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"interactable"}),(0,i.jsx)(t.td,{children:"N/A"}),(0,i.jsx)(t.td,{children:"no"}),(0,i.jsx)(t.td,{children:"false"}),(0,i.jsx)(t.td,{children:"Whether this modeled entity is interactable."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"damageable"}),(0,i.jsx)(t.td,{children:"N/A"}),(0,i.jsx)(t.td,{children:"no"}),(0,i.jsx)(t.td,{children:"false"}),(0,i.jsx)(t.td,{children:"Whether this modeled entity is damageable."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",children:"# Used to add a model to an entity when it spawns.\non meg player interacts with my_vehicle_model:\n- megmount entity:<player> model:<context.active_model> driver interactable\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",children:"# Removes the model from the specified entity.\n- megmodel entity:<context.entity> model:my_model remove\n"})}),"\n",(0,i.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Object Type: ",(0,i.jsxs)("a",{href:"/megizen-docs/objecttype/MegModeledEntityTag",children:[" ",(0,i.jsx)(t.code,{children:"MegModeledEntityTag"})]})]}),"\n",(0,i.jsxs)(t.li,{children:["Tag: ",(0,i.jsxs)("a",{href:"/megizen-docs/tags/#tag-playertagmeg_forced_invisible",children:[" ",(0,i.jsx)(t.code,{children:"PlayerTag.meg_forced_invisible"})]})]}),"\n",(0,i.jsxs)(t.li,{children:["Mechanism: ",(0,i.jsxs)("a",{href:"/megizen-docs/tags/#tag-playertagmeg_make_visible",children:[" ",(0,i.jsx)(t.code,{children:"PlayerTag.meg_make_visible"})]})]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},7023:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(9474);const s={},d=i.createContext(s);function r(e){const t=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(d.Provider,{value:t},e.children)}}}]);